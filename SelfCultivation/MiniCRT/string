// string
#include "minicrt.h"

namespace std {
	class string {
		unsigned int len;
		char* pbuf;
	public:
		explicit string(const char* str);
		string(const string&);
		~string();
		string& operator=(const string&);
		string& operator=(const char* s);
		const char& operator[](unsigned int idx) const;
		char& operator[](unsigned int idx);
		const char* c_str() const;
		unsigned int length() const;
		unsigned int size() const;
	};

	string::string(const char* str):len(0),pbuf(NULL){
		*this = str;
	}

	string::string(const string& s):len(0),pbuf(NULL){
		*this = s;
	}

	string::~string(){
		if (pbuf != NULL){
			delete[] pbuf;
			pbuf = NULL;
		}
	}

	string& string::operator=(const string& s){
		if (&s == this){
			return *this;
		}
		this->~string();
		len = s.len;
		pbuf = strcpy(new char[len+1], s.pbuf);
		return *this;
	}

	string& string::operator=(const char* s){
		this->~string();
		len = strlen(s);
		pbuf = strcpy(new char[len+1], s);
		return *this;
	}

	const char& string::operator[](unsigned int idx) const {
		return pbuf[idx];
	}
	char& string::operator[](unsigned int idx) {
		return pbuf[idx];
	}
	const char* string::c_str() const {
		return pbuf;
	}
	unsigned int string::length() const {
		return len;
	}
	unsigned int string::size() const {
		return len;
	}
	ofstream& operator<<(ofstream& o, const string& s) {
		return o << s.c_str();
	}
}
